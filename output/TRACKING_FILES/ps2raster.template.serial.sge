#!/bin/bash


# Specify the queue explicitly
#$ -q %queue%

# Specify V 
#$ -V 

# Specify to run from current working directory 
#$ -cwd 

# Specify number of cpus in a machine-specific way
#$ -pe 16way 16

# Specify the wall clock time
#$ -l h_rt=14:00:00

# Merge stderr to stdout (optional, otherwise they're in separate files)
#$ -j y

# Name the job (this will appear in the output from the qstat command)
#$ -N ps2raster

# Specify the output filename explicitly (optional; the default is named
# from the job ID, in the directory where qsub was run.)
#$ -o %dir%/ps2raster.out

# Request mail when job ends, or is aborted (optional, default is "a" only)
# (commented out)
# $ -m ea

# Specify email address
# $ -M %notifyuser%


# some commands
set echo
umask 007
umask 


# Clean out all modules
module purge
# Reset to TACC baseline
module load TACC
# Unload default compiler and mpi stack
module unload pgi mvapich2
# Load which ever combination you need
module load pgi
#module load mvapich/1.0.1
module load ddt
module load intel/11.1

# The directory to start in 
cd  %dir%
# These are the actual commands to be executed.

    DATETIME=`date +'%Y-%h-%d-T%H:%M:%S'`
    echo "[${DATETIME}] : Job starting"        >> run.ps.start
    echo "[${DATETIME}] :  %dir%        "      >> run.ps.start
    echo "[${DATETIME}] : ps2raster     "      >> run.ps.start

      numdom=$(wc -l PS_FileList |awk '{print $1}')

       echo `date` $numdom
          K=0
     for (( j = 1 ; j <= $numdom ; j++ ))
      do

      File2Process=$(head -$j PS_FileList | tail -1 | awk '{print $1}')
       echo `date` $File2Process

          OutFile=`basename $File2Process .ps`

        %gmthome%/ps2raster  $File2Process  -E300 -F${OutFile}.jpg -G%gshome%/gs -P -Tj  &

        echo  `date` $j ${OutFile}.jpg
        K=$(($K + 1))
        echo $K
        if [ $K -ge 16 ]
        then
            wait
          K=0
        fi
      done
      wait
    ERROVALUE=$?
    DATETIME=`date +'%Y-%h-%d-T%H:%M:%S'`
    if [ $ERROVALUE == 0 ] ; then
    echo "[${DATETIME}] : Job finished with return value = $ERROVALUE" >> run.ps.finish
    echo "[${DATETIME}] :  %dir%      "                  >> run.ps.finish
    echo "[${DATETIME}] :  ps2raster  "                  >> run.ps.finish
    else
    echo "[${DATETIME}] : Job finished with return value = $ERROVALUE" >> run.ps.error
    echo "[${DATETIME}] :  %dir%      "                  >> run.ps.error
    echo "[${DATETIME}] :  ps2raster  "                  >> run.ps.error
    fi

# You don't need anything special at the end of the script.
